
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Anagrams {
    final Integer[] primes =
            {2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
                    31, 37, 41, 43, 47, 53, 59, 61, 67,
                    71, 73, 79, 83, 89, 97, 101};
    Map<Character,Integer> letterTable;
    Map<Long,ArrayList<String>> anagramTable;

    public void buildLetterTable() {
        final Character[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
        for(int i = 0; i<primes.length; i++){
            letterTable.put(alphabet[i], primes[i]);
        }
    }

    Anagrams() {
        buildLetterTable();
        anagramTable = new HashMap<Long,ArrayList<String>>();
    }

    public void addWord(String s) {
        long hashcode = myHashCode(s);
        ArrayList<String> anagrams = new ArrayList<String>();
        if(anagramTable.get(hashcode) == null){
            anagramTable.put(hashcode, anagrams);
        }else{
            anagrams.add(s);
        }




    }

    public long myHashCode(String s) {
        long sum = 0;
        char alpha;
        for(int i = 0; i<s.length(); i++){
            alpha = s.charAt(i); //product sumation of prime numbers
            sum = sum * letterTable.get(alpha);
        }
        return sum;
    }

    public void processFile(String s) throws IOException {
        FileInputStream fstream = new FileInputStream(s);
        BufferedReader br = new BufferedReader(new InputStreamReader(fstream));
        String strLine;
        while ((strLine = br.readLine()) != null)   {
            this.addWord(strLine);
        }
        br.close();
    }

    public ArrayList<Map.Entry<Long,ArrayList<String>>> getMaxEntries() {
        int max = 0;
        ArrayList<Map.Entry<Long, ArrayList<String>>> maxwords = new ArrayList<>();
        for(Map.Entry<Long,ArrayList<String>> entry : anagramTable.entrySet()){
            if(entry.getValue().size() > max){
                maxwords.clear(); //if a new word is found clear everything
                max = entry.getValue().size();
                maxwords.add(entry);
            }
            else{
                maxwords.add(entry);
            }
        }
        return maxwords;
    }


    public static void main(String[] args) {
        Anagrams a = new Anagrams();

        final long startTime = System.nanoTime();
        try {
            a.processFile("words_alpha.txt");
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        ArrayList<Map.Entry<Long,ArrayList<String>>> maxEntries = a.getMaxEntries();
        final long estimatedTime = System.nanoTime() - startTime;
        final double seconds = ((double) estimatedTime/1000000000);
        System.out.println("Time: "+ seconds);
        System.out.println("List of max anagrams: "+ maxEntries);
    }
}


