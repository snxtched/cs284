public boolean add(E key, int priority) {
        if (root == null) {
            root = new Node(key, priority);
            return true;
        }
        Node<E> current = root;
        Stack<Node<E>> sequence = new Stack<>();
        while (current != null) {
            sequence.push(current);
            int compare = key.compareTo(current.data);
            if (compare == 0)
                return false;
             if (compare > 0) {
                if (current.left == null) {
                    current.left = new Node(key, priority);
                    reheap(sequence, current);
                    return true;
                }
                current = current.left;
            } else {
                sequence.push(current);
                if (current.right == null) {
                    current.right = new Node(key, priority);
                    reheap(sequence, current);
                    return true;
                }
                current = current.right;
            }
        }
        return false;
    }


    private void reheap(Stack<Node<E>> sequence, Node<E> n) {
        while (!sequence.isEmpty()){ //stack not empty
            Node<E> parent = sequence.pop(); //first element
            if(parent.priority < n.priority) { //parent P is LESS than what we are trying to add
                if (parent.data.compareTo(n.data) > 0) { //look at the data /L OR R
                    n = parent.rotateRight();
                } else {
                    n = parent.rotateLeft();
                }
                if(!sequence.isEmpty()){
                    if(sequence.peek().left == n)
                        sequence.peek().left = n;
                    else{
                        sequence.peek().right = n;
                    }
                    this.root= n;
                }
                else
                    break;
            }}}
            
