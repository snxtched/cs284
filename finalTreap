package hw4;

import java.util.Random;
import java.util.Stack;

public class Treap <E extends Comparable<E>> {
    public class Node<E> {
        public E data;//key for the search
        public int priority; // random heap priority
        public Node<E> left;
        public Node<E> right;

        public Node(E data, int priority) {
            // throw exception if data is null
            this.data = data;
            this.priority = priority;
            left = null;
            right = null;
        }

        public Node<E> rotateRight() {
            if(left == null)
                return this;
            Node<E> leftE = this.left;
            this.left = leftE.right;
            leftE.right = this;
            return leftE;

        }

        public Node<E> rotateLeft() {
            if(right == null)
                return this;
            Node<E> rightE = this.right;
            this.right = rightE.left;
            rightE.left = this;
            return rightE;
        }

    }

    private Random priorityGenerator;
    private Node<E> root;

    public Treap() {
        root = null;
        priorityGenerator = new Random();

    }

    public Treap(long seed) {
        root = null;
        priorityGenerator = new Random(seed);
    }


    private boolean find(Node<E> root, E key) {
        if (key == null)
            throw new IllegalArgumentException("searched key is null");
        if (root == null || key.compareTo(root.data) == 0)
            return true;
        int compare = key.compareTo(root.data);
        if (compare < 0) {
            return find(root.left, key);
        } else {
            return find(root.left, key);
        }
    }

    public boolean find(E key) {
        if (key == null)
            return false;
        return find(root, key);
    }

    public boolean add(E key) {
           return add(key, priorityGenerator.nextInt());

    }
    private void reheap(Stack<Node<E>> sequence, Node<E> n) {
        while (!sequence.isEmpty()) {
            Node<E> parent = sequence.pop();
            if (parent.priority < n.priority) {
                if (n.data.compareTo(parent.data) < 0) {
                    n = parent.rotateRight();
                } else {
                    n = parent.rotateLeft();
                }
                if (!sequence.isEmpty()) {
                    Node<E> grandparent = sequence.peek();
                    if (grandparent.left == parent) {
                        grandparent.left = n;
                    } else {
                        grandparent.right = n;
                    }
                } else {
                    root = n;
                }
            } else {
                break;
            }
        }
    }

    public boolean add(E key, int priority) {
        if (root == null) {
            root = new Node(key, priority);
            return true;
        }
        Node<E> current = root;
        Stack<Node<E>> sequence = new Stack<>();
        while (current != null) {
            sequence.push(current);
            int compare = key.compareTo(current.data);
            if (compare == 0) {
                return false;
            } else if (compare < 0) {
                if (current.left == null) {
                    current.left = new Node(key, priority);
                    reheap(sequence, current.left);
                    return true;
                }
                current = current.left;
            } else {
                if (current.right == null) {
                    current.right = new Node(key, priority);
                    reheap(sequence, current.right);
                    return true;
                }
                current = current.right;
            }
        }
        return false;
    }




    public boolean delete(E key) {
        Node<E> current = root;
        Node<E> parent = null;
        boolean isLeftChild = false;

        // find the node with the given key
        while (current != null && !current.data.equals(key)) {
            parent = current;
            if (key.compareTo(current.data) < 0) {
                current = current.left;
                isLeftChild = true;
            } else {
                current = current.right;
                isLeftChild = false;
            }
        }

        // if the node was not found, return false
        if (current == null) {
            return false;
        }

        // trickle the node down to a leaf using rotations
        while (current.left != null || current.right != null) {
            if (current.left == null) {
                current = current.rotateLeft();
            } else if (current.right == null) {
                current = current.rotateRight();
            } else if (current.left.priority > current.right.priority) {
                current = current.rotateRight();
            } else {
                current = current.rotateLeft();
            }
            if (parent != null) {
                if (isLeftChild) {
                    parent.left = current;
                } else {
                    parent.right = current;
                }
            } else {
                root = current;
            }
            parent = current;
            isLeftChild = (current.left != null);
        }

        // remove the leaf node
        if (parent != null) {
            if (isLeftChild) {
                parent.left = null;
            } else {
                parent.right = null;
            }
        } else {
            root = null;
        }

        return true;
    }


    private String toString(Node current, int level) {
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < level; i++)
            s.append(" ");
        if (current == null)
            s.append("null\n");
        else {
            s.append("(key = " + current.data.toString() + ", priority = " + current.priority + ")" + "\n");
            s.append(toString(current.left, level + 1));
            s.append(toString(current.right, level + 1));
        }
        return s.toString();
    }

    public String toString() {
        return toString(root, 0);
    }

    public static void main(String[] args) {
        Treap<Integer> testTree = new Treap<Integer>();
        testTree.add(4, 19);
        testTree.add(2, 31);
        testTree.add(6, 70);
        testTree.add(1, 84);
        testTree.add(3, 12);
        testTree.add(5, 83);
        testTree.add(7, 26);
        testTree.delete(1);
        System.out.println(testTree);
    }
}
